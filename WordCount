package org.mapreduce.test;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.SequenceFile.CompressionType;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.compress.GzipCodec;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;

public class WordCount {
	
	//临时配置HADOOP_HOME环境变量
	static {
		System.setProperty("hadoop.home.dir", "E:\\hadoop-2.6.0-cdh5.9.0");
	}
	
	/**
	 * 默认MapReduce是通过TextInputFormat进行切片，并交给Mapper进行处理
	 * TextInputFormat：key：当前行的首字母的索引,value:当前行数据
	 * Mapper类参数：输入key类型：Long，输入Value类型：String，输出key类型：String，输出Value类型：Long
	 * MapReduce为了网络传输时序列化文件比较小，执行速度快，对基本类型进行包装，实现自己的序列化
	 * @author Administrator
	 *
	 */
	public static class MyMapper extends Mapper<LongWritable, Text, Text, LongWritable> {

		LongWritable one = new LongWritable(1);
		
		/**
		 * 将每行数据拆分，拆分完输出每个单词和个数
		 */
		@Override
		protected void map(LongWritable key, Text value, Mapper<LongWritable, Text, Text, LongWritable>.Context context)
				throws IOException, InterruptedException {
			String words = value.toString();
			//将每行数据拆分成各个单词
			String[] wordArr = words.split(" ");
			//遍历各个单词
			for (String word : wordArr) {
				//输出格式<单词,1>
				context.write(new Text(word), one);
			}
		}
		
	}
	
	/**
	 * 进行全局聚合
	 * Reducer参数：输入key类型：String,输入Value类型：Long,输出key类型：String,输出Value类型：Long
	 * @author Administrator
	 *
	 */
	public static class MyReducer extends Reducer<Text, LongWritable, Text, LongWritable> {

		/**
		 * 将map输出结果进行全局聚合
		 * key：单词, values：个数[1,1,1]
		 */
		@Override
		protected void reduce(Text key, Iterable<LongWritable> values,
				Reducer<Text, LongWritable, Text, LongWritable>.Context context) throws IOException, InterruptedException {
			Long sum = 0L;
			for (LongWritable value : values) {
				//累加单词个数
				sum += value.get();
			}
			//输出最终数据结果
			context.write(key, new LongWritable(sum));
		}

		
		
	}
	
	/**
	 * 驱动方法
	 * @param args
	 * @throws IllegalArgumentException
	 * @throws IOException
	 * @throws ClassNotFoundException
	 * @throws InterruptedException
	 */
	public static void main(String[] args) throws IllegalArgumentException, IOException, ClassNotFoundException, InterruptedException {
		//0.创建一个Job
		Configuration conf = new Configuration();
		//连接hadoop环境使用set方法重新设置
//		conf.set("fs.defaultFS", "hdfs://hadoop-senior01.test.com:8020");
		
		Job job = Job.getInstance(conf, "word-count");
		//通过类名打成jar包
		job.setJarByClass(WordCount.class);
		
		//1.输入文件
		FileInputFormat.addInputPath(job, new Path(args[0]));
		//
		job.setInputFormatClass(SequenceFileInputFormat.class);
		//2.编写mapper处理逻辑
		job.setMapperClass(MyMapper.class);
		job.setMapOutputKeyClass(Text.class);
		job.setMapOutputValueClass(LongWritable.class);
		//3.shuffle流程(暂时不用处理)
		
		//4.编写reducer处理逻辑
		job.setReducerClass(MyReducer.class);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(LongWritable.class);
		//5.输出文件
		FileOutputFormat.setOutputPath(job, new Path(args[1]));
		
		//6.运行Job
		boolean result = job.waitForCompletion(true);
		System.out.println(result ? 1 : 0);
	}
	
}
